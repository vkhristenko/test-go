// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package codegen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestInterfaceClient is the client API for TestInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestInterfaceClient interface {
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error)
}

type testInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestInterfaceClient(cc grpc.ClientConnInterface) TestInterfaceClient {
	return &testInterfaceClient{cc}
}

func (c *testInterfaceClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := c.cc.Invoke(ctx, "/quickstart.codegen.TestInterface/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestInterfaceServer is the server API for TestInterface service.
// All implementations must embed UnimplementedTestInterfaceServer
// for forward compatibility
type TestInterfaceServer interface {
	Test(context.Context, *TestRequest) (*TestReply, error)
	mustEmbedUnimplementedTestInterfaceServer()
}

// UnimplementedTestInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedTestInterfaceServer struct {
}

func (UnimplementedTestInterfaceServer) Test(context.Context, *TestRequest) (*TestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedTestInterfaceServer) mustEmbedUnimplementedTestInterfaceServer() {}

// UnsafeTestInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestInterfaceServer will
// result in compilation errors.
type UnsafeTestInterfaceServer interface {
	mustEmbedUnimplementedTestInterfaceServer()
}

func RegisterTestInterfaceServer(s grpc.ServiceRegistrar, srv TestInterfaceServer) {
	s.RegisterService(&TestInterface_ServiceDesc, srv)
}

func _TestInterface_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestInterfaceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quickstart.codegen.TestInterface/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestInterfaceServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestInterface_ServiceDesc is the grpc.ServiceDesc for TestInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quickstart.codegen.TestInterface",
	HandlerType: (*TestInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _TestInterface_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quickstart/codegen/test.proto",
}
